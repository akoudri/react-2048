pipeline {
    agent any
    
    environment {
        NEXT_PUBLIC_APP_VERSION = "1.0.${BUILD_NUMBER}"
        AWS_S3_BUCKET = 'jenkins-training-120225'
        AWS_DEFAULT_REGION = 'eu-west-3'
        DOCKER_REGISTRY = '923692348898.dkr.ecr.eu-west-3.amazonaws.com'
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'mynodejs:latest'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    npm ci
                    npm run build
                '''
            }
        }
        stage('Tests') {
            parallel {
                stage('Running tests') {
                    agent {
                        docker {
                            image 'mynodejs:latest'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            npm run test
                        '''
                    }
                }
                stage('Reporting') {
                    agent {
                        docker {
                            image 'mynodejs:latest'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            npm run test-coverage
                        '''
                    }
                }
            }
        }
        stage('Docker Image') {
            agent {
                docker {
                    image 'bentolor/docker-dind-awscli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-cli-key', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        docker build -t $DOCKER_REGISTRY/jenkins-training:$NEXT_PUBLIC_APP_VERSION .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
                        docker push $DOCKER_REGISTRY/jenkins-training:$NEXT_PUBLIC_APP_VERSION
                    '''
                }
            }
        }
        stage('Deploiement') {
            agent {
                docker {
                    image 'amazon/aws-cli'
                    args "--entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-cli-key', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        yum install jq -y
                        sed -i "s/APP_VERSION/$NEXT_PUBLIC_APP_VERSION/g" aws/taskdef.json
                        export REV=$(aws ecs register-task-definition --cli-input-json file://aws/taskdef.json | jq -r '.taskDefinition.revision')
                        aws ecs update-service --cluster jenkins-cluster --service nginx-service --task-definition nginx-service:$REV
                        aws ecs wait services-stable --cluster jenkins-cluster --services nginx-service
                    '''
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'test-report.html'
        }
    }
}